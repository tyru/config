#!/bin/bash
set -u
shopt -s nullglob

SRC_DIR=src
DOTFILES_DIR=home
LOG_LEVEL=1

info() {
  [ $LOG_LEVEL -ge 1 ] && echo "$@"
}

debug() {
  [ $LOG_LEVEL -ge 2 ] && echo "$@"
}

cmd_init() {
  cmd_make_symlinks && cmd_upgrade_all
}

cmd_upgrade_all() {
  filter_pkgs '[ "${skip:-}" != true ]' | while read -r pkg; do
    cmd_upgrade "$pkg" || return $?
  done
}

filter_pkgs() {
  local expr=$1
  local pkg
  for pkg in $SRC_DIR/*; do
    pkg=$(basename "$pkg")
    if (source "$SRC_DIR/$pkg/PKGBUILD" && eval "$expr"); then
      echo "$pkg"
    fi
  done
}

cmd_upgrade() {
  local pkg=$1
  cmd_update "$pkg" && cmd_build "$pkg" && cmd_package "$pkg"
}

cmd_update() {
  local pkg=$1
  run_action "$pkg" update
}

cmd_build() {
  local pkg=$1
  run_action "$pkg" build
}

cmd_package() {
  local pkg=$1
  run_action "$pkg" package
}

run_action() {
  local pkg=$1
  local action=$2
  (do_run_action "$pkg" "$action")
}

do_run_action() {
  local pkg=$1
  local action=$2

  # PKGBUILD
  source "$SRC_DIR/$pkg/PKGBUILD" || return $?

  # env.conf
  [ -f ./env.conf ] && source ./env.conf

  # pre hook
  run_hook "$pkg" "$action" "pre-$action"

  # action
  info "* Running action: $action $pkg"
  (cd "$SRC_DIR/$pkg" && $action) || return $?
  info "* End action: $action $pkg"

  # post hook
  run_hook "$pkg" "$action" "post-$action"
}

run_hook() {
  local pkg=$1
  local action=$2
  local hook=$3
  local script
  debug "* Running $hook hook: $action $pkg"
  for script in $(get_hook_scripts "$hook"); do
    pkg=$pkg \
    pkgdir=$SRC_DIR/$pkg \
    action=$action \
    hook=$hook \
    repos=${repos:-} \
    prefix=${prefix:-} \
      bash "$script" || return $?
  done
  debug "* End $hook hook: $action $pkg"
}

get_hook_scripts() {
  local hook=$1
  [ -f "hooks/$hook.sh" ] && echo "hooks/$hook.sh"
  if [ -d "hooks/$hook.d/" ]; then
    find "hooks/$hook.d/" -type f -name '*.sh'
  fi
}

cmd_make_symlinks() {
  local name
  for name in $(ls -A $DOTFILES_DIR/); do
    mkdir -p "$(dirname "$HOME/$name")"
    if [ ! -e "$HOME/$name" ]; then
      ln -T -s "$(pwd)/$DOTFILES_DIR/$name" "$HOME/$name" && info "created: $HOME/$name"
    else
      info "skip: $HOME/$name"
    fi
  done
}

cmd_rm_symlinks() {
  local name
  for name in $(ls -A $DOTFILES_DIR/); do
    if [ -L "$HOME/$name" ]; then
      rm -f "$HOME/$name"
      info "removed: $HOME/$name"
    fi
  done
}

cmd_help() {
  cat <<EOM
Usage: config COMMAND ARGS

COMMAND

  init
    same as make-symlinks, upgrade-all

  upgrade-all
    upgrade all packages under src directory

  upgrade <pkg>
    same as running update, build, package to <pkg>

  update <pkg>
    update repository (e.g. git pull)

  build <pkg>
    build <pkg> (e.g. ./configure && make)

  package <pkg>
    package <pkg> (e.g. make install)

  make-symlinks
    make symlinks from home/ to ~/

  rm-symlinks
    remove symlinks from ~/

EOM
}

main() {
  cd "$(dirname "$0")" || exit $?

  # no arguments
  if [ $# -eq 0 ]; then
    cmd_help
    return 0
  fi

  # parse options
  while [ $# -ne 0 ]; do
    case "$1" in
      -h|--help) cmd_help; return 0 ;;
      -q) LOG_LEVEL=$((LOG_LEVEL - 1)) ;;
      -qq) LOG_LEVEL=$((LOG_LEVEL - 2)) ;;
      -qqq) LOG_LEVEL=$((LOG_LEVEL - 3)) ;;
      -v) LOG_LEVEL=$((LOG_LEVEL + 1)) ;;
      -vv) LOG_LEVEL=$((LOG_LEVEL + 2)) ;;
      -vvv) LOG_LEVEL=$((LOG_LEVEL + 3)) ;;
      --) shift; break ;;
      -*) echo "error: unknown option: $1" >&2; return 1 ;;
      *) break ;;
    esac
    shift
  done

  # run command
  local cmd=$1
  shift
  case "$cmd" in
    init) cmd_init "$@" ;;
    upgrade-all) cmd_upgrade_all ;;
    upgrade) cmd_upgrade "$@" ;;
    update) cmd_update "$@" ;;
    build) cmd_build "$@" ;;
    package) cmd_package "$@" ;;
    make-symlinks) cmd_make_symlinks ;;
    rm-symlinks) cmd_rm_symlinks ;;
    *) cmd_help; return 1 ;;
  esac
}

main "$@"
