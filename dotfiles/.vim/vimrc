" Don't set scriptencoding before 'encoding' option is set!
" scriptencoding utf-8

" vim:set et fen fdm=marker:

" See also: ~/.vimrc or ~/_vimrc


let s:is_win = has('win16') || has('win32') || has('win64') || has('win95')
let s:is_msys = has('win32unix') && !has('gui_running')
if s:is_win
    let $MYVIMDIR = expand('~/vimfiles')
else
    let $MYVIMDIR = expand('~/.vim')
endif

" Use plain vim when vim was invoked by 'sudo' command.
if exists('$SUDO_USER')
    finish
endif

if !exists('$VIMRC_USE_VIMPROC')
    " 0: vimproc disabled
    " 1: vimproc enabled
    " 2: each plugin default(auto)
    let $VIMRC_USE_VIMPROC = 1
endif
if !exists('$VIMRC_FORCE_LANG_C')
    let $VIMRC_FORCE_LANG_C = 0
endif
if !exists('$VIMRC_LOAD_MENU')
    let $VIMRC_LOAD_MENU = 1
endif


" Basic {{{

" Reset all options
set all&

" Reset auto-commands
augroup vimrc
    autocmd!
augroup END

if $VIMRC_FORCE_LANG_C
    language messages C
    language time C
endif

if !$VIMRC_LOAD_MENU
    set guioptions+=M
    let g:did_install_default_menus = 1
    let g:did_install_syntax_menu = 1
endif

filetype plugin indent on

if filereadable(expand('$MYVIMDIR/vimrc.local'))
    execute 'source' expand('$MYVIMDIR/vimrc.local')
endif

" }}}
" Encoding {{{
let s:enc = 'utf-8'

let &enc = s:enc
let &fenc = s:enc
let s:fencs = [s:enc] + split(&fileencodings, ',') + ['iso-2022-jp', 'iso-2022-jp-3', 'cp932']
let &fileencodings = join(filter(s:fencs, 'count(s:fencs, v:val) == 1'), ',')

unlet s:fencs
unlet s:enc

scriptencoding utf-8

set fileformats=unix,dos,mac
if exists('&ambiwidth')
    set ambiwidth=double
endif

" }}}
" Load Plugins {{{

set rtp+=$MYVIMDIR/bundle/vivo.vim

" Fetch managed plugins from remote.
" TODO: vivo should show the messages
" echo 'Fetching plugins...'
call vivo#fetch_all()
" echom 'Fetching plugins...Done.'

" Add managed plugins to 'runtimepath'.
" (It won't add disabled plugins)
filetype off
call vivo#rtp_append_plugins()
" call vivo#rtp_append_pack()
filetype plugin indent on

" Import emap.vim & altercmd.vim commands {{{
" I use those commands also in plugconf.
" So define those commands before loading plugconf.

" Define :Map commands (TODO: remove emap dependency)
call emap#load('noprefix')
call emap#set_sid_from_sfile(expand('<sfile>'))


" Define :MapAlterCommand commands
if globpath(&rtp, 'autoload/altercmd.vim') !=# ''
    call altercmd#load()
    command!
    \   -bar -nargs=+
    \   MapAlterCommand
    \   CAlterCommand <args> | AlterCommand <cmdwin> <args>
else
    command! -nargs=* MapAlterCommand :
endif


" Set up general prefix keys. {{{

DefMacroMap [nxo] orig <C-q>
Map [n] <orig><orig> <orig>
DefMacroMap [ic] orig <C-g><C-q>

DefMacroMap [nxo] excmd <Space>
DefMacroMap [nxo] operator ;

let g:mapleader = ';'
Map [n] <Leader> <Nop>

Map [n] ;; ;
Map [n] ,, ,

let g:maplocalleader = '\'
Map [n] <LocalLeader> <Nop>

" }}}

" }}}

" Load all plugin configs from '~/.vim/vivo/plugconf/*.vim'
" (if you prefer writing configs in separated files from vimrc).
call vivo#plugconf#load()

" TODO: Load only vim-singleton and call it before 'vivo#rtp_append_*()'.
if has('clientserver') && vivo#loaded_plugin('vim-singleton')
    call singleton#enable()
endif

" Generate helptags for plugins in 'runtimepath'.
call vivo#helptags()

" }}}
" Options {{{

" indent
set tabstop=2
set shiftwidth=2
set softtabstop=-1
set autoindent
set expandtab
set shiftround
set copyindent
set preserveindent
if exists('+breakindent')
    set breakindent
    " set breakindentopt=sbr
    set showbreak=...
endif

" search
set hlsearch
set incsearch
set smartcase
set ignorecase

" Aesthetic options
set list
" Assumption: Trailing spaces are already highlighted and noticeable.
" set listchars=tab:>.,extends:>,precedes:<,trail:-,eol:$
set listchars=tab:>.,extends:>,precedes:<,trail:-
set display=lastline
set t_Co=256
set number
set showcmd

" command-line
set cmdheight=1
set wildmenu
set wildmode=longest,list,full

" completion
set complete=.,w,b,u,t,i,d,k,kspell
set pumheight=20

" tags
if has('path_extra')
    set tags+=.;
    set tags+=tags;
    set path+=.;
endif

" Swapfile
if 1
    " Use swapfile.
    set swapfile
    set directory=$MYVIMDIR/info/swap//
    silent! call mkdir(substitute(&directory, '//$', '', ''), 'p')
    " Open a file as read-only if swap exists
    autocmd vimrc SwapExists * let v:swapchoice = 'o'
else
    " No swapfile.
    set noswapfile
    set updatecount=0
endif

" title
set title
let &titlestring = '%{getcwd()}'

function! MyTabLabel(tabnr) "{{{
    if exists('*gettabvar')
        let title = gettabvar(a:tabnr, 'title')
        if title != ''
            return title
        endif
    endif

    let buflist = tabpagebuflist(a:tabnr)
    let bufname = ''
    let modified = 0
    if type(buflist) ==# 3
        let bufname = bufname(buflist[tabpagewinnr(a:tabnr) - 1])
        let bufname = fnamemodify(bufname, ':t')
        " let bufname = pathshorten(bufname)
        for bufnr in buflist
            if getbufvar(bufnr, '&modified')
                let modified = 1
                break
            endif
        endfor
    endif

    if bufname == ''
        let label = '[No Name]'
    else
        let label = bufname
    endif
    return label . (modified ? '[+]' : '')
endfunction "}}}
" FIXME: Doesn't work with two or more than tabpages in CUI mode.
function! s:tabline() "{{{
    let s = ''
    for i in range(tabpagenr('$'))
        " select the highlighting
        if i + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif

        " set the tab page number (for mouse clicks)
        let s .= '%' . (i + 1) . 'T'

        " the label is made by MyTabLabel()
        let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
    endfor

    " after the last tab fill with TabLineFill and reset tab page nr
    let s .= '%#TabLineFill#%T'

    " right-align the label to close the current tab page
    if tabpagenr('$') > 1
        let s .= '%=%#TabLine#%999XX'
    endif

    return s
endfunction "}}}
" let &tabline = s:tabline()

let &guitablabel = '%{MyTabLabel(v:lnum)}'

" statusline
set laststatus=2
function! s:statusline() "{{{
    let s = '[%f]%( [%M%R%H%W]%)%( [%{&ft}]%) %{&fenc}/%{&ff}'
    let s .= '%('

    let s .= '%( %{GetDocumentPosition()}%)'

    let s .= '%)'

    return s
endfunction "}}}
let &statusline = s:statusline()

function! GetDocumentPosition()
    return float2nr(str2float(line('.')) / str2float(line('$')) * 100) . "%"
endfunction

" 'guioptions' flags are set on FocusGained
" because "cmd.exe start /min" doesn't work.
" (always start up as foreground)
augroup vimrc-guioptions
    autocmd!
augroup END
if has('vim_starting')
    command! -nargs=* AutocmdWhenVimStarting    autocmd FocusGained vimrc-guioptions * <args>
    command! -nargs=* AutocmdWhenVimStartingEnd autocmd FocusGained vimrc-guioptions * autocmd! vimrc-guioptions
else
    command! -nargs=* AutocmdWhenVimStarting    <args>
    command! -nargs=* AutocmdWhenVimStartingEnd :
endif

" Must be set in .vimrc
" set guioptions+=p
AutocmdWhenVimStarting set guioptions-=a
AutocmdWhenVimStarting set guioptions+=A
" Include 'e': tabline
" Otherwise  : guitablabel
AutocmdWhenVimStarting set guioptions-=e
AutocmdWhenVimStarting set guioptions+=h
AutocmdWhenVimStarting set guioptions+=m
AutocmdWhenVimStarting set guioptions-=L
AutocmdWhenVimStarting set guioptions-=T
AutocmdWhenVimStartingEnd

delcommand AutocmdWhenVimStarting
delcommand AutocmdWhenVimStartingEnd

" convert "\\" to "/" on win32 like environment
if exists('+shellslash')
    set shellslash
endif

" visual bell
set novisualbell
autocmd vimrc VimEnter * set t_vb=

" restore screen
set norestorescreen
set t_ti=
set t_te=

" timeout
set notimeout

" cursor behavior in insertmode
set whichwrap=b,s
set backspace=indent,eol,start
set formatoptions=mMcroqnl2
" 7.3.541 or later
set formatoptions+=j

" undo-persistence
if has('persistent_undo')
    set undofile
    let &undodir = $MYVIMDIR . '/info/undo'
    silent! call mkdir(&undodir, 'p')
endif

if has('conceal')
    set concealcursor=nvic
endif

" jvgrep
if executable('jvgrep')
    set grepprg=jvgrep
endif

set browsedir=current

" Font {{{
if has('gui_running')
    if s:is_win
        if exists('+renderoptions')
            " If 'renderoptions' option exists,
            set renderoptions=type:directx,renmode:5
            " ... and if "Ricty_Diminished" font is installed,
            " enable DirectWrite.
            try
            set gfn=Ricty_Diminished_Discord:h14:cSHIFTJIS
            catch | endtry
        endif
    elseif has('mac')    " Mac
        set guifont=Osaka－等幅:h14
        set printfont=Osaka－等幅:h14
    else    " *nix OS
        try
            set guifont=Monospace\ 12
            set printfont=Monospace\ 12
            set linespace=0
        catch
            set guifont=Monospace\ 12
            set printfont=Monospace\ 12
            set linespace=4
        endtry
    endif
endif
" }}}

" misc.
set keywordprg=
set diffopt+=vertical
set history=1000
set nrformats-=octal
set shortmess+=aI
" set switchbuf=useopen,usetab
set textwidth=80
set matchpairs+=<:>

" }}}
" ColorScheme {{{

set bg=dark
colorscheme evening

" too annoying
highlight ColorColumn ctermfg=12 guifg=Red ctermbg=NONE guibg=NONE

" }}}
" Mappings, Abbreviations {{{

" map {{{
" operator {{{

" Copy to clipboard or primary.
Map [nxo] <operator>y     "+y
Map [nxo] <operator>Y     "*y

" Do not destroy noname register.
Map [nxo] x "_x

Map [nxo] <operator>e =

" }}}
" textobj {{{

Map [o] gv :<C-u>normal! gv<CR>

" }}}
" motion {{{

" FIXME: Does not work in visual mode.
Map [n] ]k :<C-u>call search('^\S', 'Ws')<CR>
Map [n] [k :<C-u>call search('^\S', 'Wsb')<CR>

Map [nxo] gp %

" }}}

Map [nxo] H ^
Map [nxo] L $

" http://itchyny.hatenablog.com/entry/2016/02/02/210000
Map -expr [nxo] <C-b> max([winheight(0) - 2, 1]) . "\<C-u>" . (line('.') < 1         + winheight(0) ? 'H' : 'L')
Map -expr [nxo] <C-f> max([winheight(0) - 2, 1]) . "\<C-d>" . (line('.') > line('$') - winheight(0) ? 'L' : 'H')
Map -expr [nxo] <C-y> (line('w0') <= 1         ? 'k' : "\<C-y>")
Map -expr [nxo] <C-e> (line('w$') >= line('$') ? 'j' : "\<C-e>")

" }}}
" nmap {{{

DefMacroMap [nxo] fold z

" Open only current line's fold.
Map [n] <fold><Space> zMzvzz

" Folding mappings easy to remember.
Map [n] <fold>l zo
Map [n] <fold>h zc

" +virtualedit
if has('virtualedit')
    Map -expr [n] i col('$') is col('.') ? 'A' : 'i'
    Map -expr [n] a col('$') is col('.') ? 'A' : 'a'
    Map       [n] <orig>i i
    Map       [n] <orig>a a

    " Back to col '$' when current col is right of col '$'. {{{
    "
    " 1. move to the last col
    " when over the last col ('virtualedit') and getregtype(v:register) ==# 'v'.
    " 2. do not insert " " before inserted text
    " when characterwise and getregtype(v:register) ==# 'v'.

    function! s:paste_characterwise_nicely()
        let reg = '"' . v:register
        let virtualedit_enabled =
        \   has('virtualedit') && &virtualedit =~# '\<all\>\|\<onemore\>'
        let move_to_last_col =
        \   (virtualedit_enabled && col('.') >= col('$'))
        \   ? '$' : ''
        let paste =
        \   reg . (getline('.') ==# '' ? 'P' : 'p')
        return getregtype(v:register) ==# 'v' ?
        \   move_to_last_col . paste :
        \   reg . 'p'
    endfunction

    Map -expr [n] p <SID>paste_characterwise_nicely()
    " }}}
endif

Map [n] <excmd>me :<C-u>messages<CR>
Map [n] <excmd>di :<C-u>display<CR>

Map [n] gl :<C-u>cnext<CR>
Map [n] gh :<C-u>cNext<CR>

Map [n] <excmd>ct :<C-u>tabclose<CR>

Map [n] <excmd>tl :<C-u>tabedit<CR>
Map [n] <excmd>th :<C-u>tabedit<CR>:execute 'tabmove' (tabpagenr() isnot 1 ? tabpagenr() - 2 : '')<CR>

if has('gui_running')
    Map -script [i] <C-s> <SID>(gui-save)<Esc>
    Map -script [n] <C-s> <SID>(gui-save)
    Map -script [i] <SID>(gui-save) <C-o><SID>(gui-save)
    Map         [n] <SID>(gui-save) :<C-u>call <SID>gui_save()<CR>
    function! s:gui_save()
        if bufname('%') ==# ''
            browse confirm saveas
        else
            update
        endif
    endfunction
endif


" See also rooter.vim settings.
Map [n] ,cd       :<C-u>cd %:p:h<CR>

" 'Y' to yank till the end of line.
Map [n] Y    y$

" Moving tabs
Map -silent [n] <Left>    :<C-u>-tabmove<CR>
Map -silent [n] <Right>   :<C-u>+tabmove<CR>

" Execute most used command quickly {{{
Map [n] <excmd>w      :<C-u>update<CR>
Map -silent [n] <excmd>q      :<C-u>call <SID>vim_never_die_close()<CR>

function! s:vim_never_die_close()
    try
        close
    catch
        if !&modified
            bwipeout!
        endif
    endtry
endfunction
" }}}

" Edit/Apply .vimrc quickly
Map [n] <excmd>ev     :<C-u>edit $MYVIMRC<CR>

" Cmdwin {{{
set cedit=<C-l>
function! s:cmdwin_enter()
    startinsert!
    setlocal nonumber
endfunction
autocmd vimrc CmdwinEnter * call s:cmdwin_enter()

" }}}
" Toggle options {{{
function! s:advance_state(states, elem) "{{{
    let curidx = index(a:states, a:elem)
    let curidx = (curidx is -1 ? 0 : curidx)
    let curidx = (curidx + 1 >=# len(a:states) ? 0 : curidx + 1)
    return a:states[curidx]
endfunction "}}}

function! s:toggle_option_list(states, optname) "{{{
    let varname = '&' . a:optname
    call setbufvar(
    \   '%',
    \   varname,
    \   s:advance_state(
    \       a:states,
    \       getbufvar('%', varname)))
    execute 'setlocal' a:optname . '?'
endfunction "}}}

function! s:toggle_winfix()
    if &winfixheight || &winfixwidth
        setlocal nowinfixheight nowinfixwidth
        echo 'released.'
    else
        setlocal winfixheight winfixwidth
        echo 'fixed!'
    endif
endfunction

Map [n] <excmd>oh  :<C-u>setlocal hlsearch! hlsearch?<CR>
Map [n] <excmd>oi  :<C-u>setlocal ignorecase! ignorecase?<CR>
Map [n] <excmd>op  :<C-u>setlocal paste! paste?<CR>
Map [n] <excmd>ow  :<C-u>setlocal wrap! wrap?<CR>
Map [n] <excmd>oe  :<C-u>setlocal expandtab! expandtab?<CR>
Map [n] <excmd>ol  :<C-u>setlocal list! list?<CR>
Map [n] <excmd>on  :<C-u>setlocal number! number?<CR>
Map [n] <excmd>om  :<C-u>setlocal modeline! modeline?<CR>
Map [n] <excmd>ot  :<C-u>execute 'silent call <SID>toggle_option_list([2, 4, 8], "tabstop")' <Bar>
\                       let &l:shiftwidth = &l:tabstop <Bar>
\                       redraw <Bar>
\                       echo 'tabstop=' . &tabstop . ' shiftwidth=' . &shiftwidth<CR>
Map [n] <excmd>ofc :<C-u>call <SID>toggle_option_list(['', 'all'], 'foldclose')<CR>
Map [n] <excmd>ofm :<C-u>call <SID>toggle_option_list(['manual', 'marker', 'indent'], 'foldmethod')<CR>
Map [n] <excmd>ofw :<C-u>call <SID>toggle_winfix()<CR>

" }}}
" <Space>[hjkl] for <C-w>[hjkl] {{{
Map -silent [n] <Space>j <C-w>j
Map -silent [n] <Space>k <C-w>k
Map -silent [n] <Space>h <C-w>h
Map -silent [n] <Space>l <C-w>l
" }}}
" Moving between tabs {{{
Map -silent [n] <C-n> gt
Map -silent [n] <C-p> gT
" }}}
" "Use one tabpage per project" project {{{
" :SetTabName - Set tab's title {{{

Map -silent [n] g<C-t> :<C-u>SetTabName<CR>
command! -bar -nargs=* SetTabName call s:cmd_set_tab_name(<q-args>)
function! s:cmd_set_tab_name(name) "{{{
    let old_title = exists('t:title') ? t:title : ''
    if a:name == ''
        " Hitting <Esc> returns empty string.
        let title = input('tab name?:', old_title)
        let t:title = title != '' ? title : old_title
    else
        let t:title = a:name
    endif
    if t:title !=# old_title
        " Adding ! will update tabline too.
        redraw!
    endif
endfunction "}}}
" }}}
" }}}
" }}}
" vmap {{{

Map -silent [x] y y:<C-u>call <SID>remove_trailing_spaces_blockwise()<CR>

function! s:remove_trailing_spaces_blockwise()
    let regname = v:register
    if getregtype(regname)[0] !=# "\<C-v>"
        return ''
    endif
    let value = getreg(regname, 1)
    let expr = 'substitute(v:val, '.string('\v\s+$').', "", "")'
    let value = s:map_lines(value, expr)
    call setreg(regname, value, "\<C-v>")
endfunction

function! s:map_lines(str, expr)
    return join(map(split(a:str, '\n', 1), a:expr), "\n")
endfunction


" Tab key indent
" NOTE: <S-Tab> is GUI only.
Map [x] <Tab> >gv
Map [x] <S-Tab> <gv

" Space key indent (inspired by sakura editor)
Map [x] <Space><Space> <Esc>:call <SID>space_indent(0)<CR>gv
Map [x] <Space><BS> <Esc>:call <SID>space_indent(1)<CR>gv
Map -remap [x] <Space><S-Space> <Space><BS>

function! s:space_indent(leftward)
    let save = [&l:expandtab, &l:shiftwidth]
    setlocal expandtab shiftwidth=1
    execute 'normal!' (a:leftward ? 'gv<<' : 'gv>>')
    let [&l:expandtab, &l:shiftwidth] = save
endfunction

" }}}
" map! {{{
Map [ic] <C-f> <Right>
Map -expr [i] <C-b> col('.') ==# 1 ? "\<C-o>k\<End>" : "\<Left>"
Map [c] <C-b> <Left>
Map [ic] <C-a> <Home>
Map [ic] <C-e> <End>
Map [i] <C-d> <Del>
Map -expr [c] <C-d> getcmdpos()-1<len(getcmdline()) ? "\<Del>" : ""
" Emacs like kill-line.
Map -expr [i] <C-k> "\<C-g>u".(col('.') == col('$') ? '<C-o>gJ' : '<C-o>D')
Map [c] <C-k> <C-\>e getcmdpos() == 1 ? '' : getcmdline()[:getcmdpos()-2]<CR>

" }}}
" imap {{{

" make <C-w> and <C-u> undoable.
" NOTE: <C-u> may be already mapped by $VIMRUNTIME/vimrc_example.vim
Map [i] <C-w> <C-g>u<C-w>
Map -force [i] <C-u> <C-g>u<C-u>

" completion {{{

DefMacroMap [i] compl <C-l>

Map [i] <compl><C-n> <C-x><C-n>
Map [i] <compl><C-p> <C-x><C-p>
Map [i] <compl><C-]> <C-x><C-]>
Map [i] <compl><C-d> <C-x><C-d>
Map [i] <compl><C-f> <C-x><C-f>
Map [i] <compl><C-i> <C-x><C-i>
Map [i] <compl><C-k> <C-x><C-k>
Map [i] <compl><C-l> <C-x><C-l>
Map [i] <compl><C-s> <C-x><C-s>
Map [i] <compl><C-t> <C-x><C-t>

" }}}
" }}}
" cmap {{{
if &wildmenu
    Map -force [c] <C-f> <Space><BS><Right>
    Map -force [c] <C-b> <Space><BS><Left>
endif

Map [c] <C-n> <Down>
Map [c] <C-p> <Up>

" }}}
" abbr {{{
MapAlterCommand th     tab help
" MapAlterCommand t      tabedit
MapAlterCommand sf     setf
MapAlterCommand hg     helpgrep
MapAlterCommand ds     diffsplit
MapAlterCommand do     diffoff!

" For typo.
MapAlterCommand qw     wq
" }}}


" Centering display position after certain commands {{{

Map [nx] <SID>(centering-display) zvzz

Map -script [n] * *<SID>(centering-display)
Map -script [n] # #<SID>(centering-display)

Map -script [n] gd gd<SID>(centering-display)
Map -script [n] gD gD<SID>(centering-display)

Map -remap [nx] n n<SID>(centering-display)
Map -remap [nx] N N<SID>(centering-display)

" }}}

" }}}
" FileType & Syntax {{{

" Must be after 'runtimepath' setting!
syntax enable

" FileType {{{

function! s:current_filetypes() "{{{
    return split(&l:filetype, '\.')
endfunction "}}}
function! s:set_dict() "{{{
    let filetype_vs_dictionary = {
    \   'c': ['c', 'cpp'],
    \   'cpp': ['c', 'cpp'],
    \   'html': ['html', 'css', 'scss', 'javascript', 'smarty', 'htmldjango'],
    \   'scala': ['scala', 'java'],
    \}

    let dupcheck = {}
    let dicts = []
    for ft in s:current_filetypes()
        for ft in get(filetype_vs_dictionary, ft, [ft])
            if has_key(dupcheck, ft)
                continue
            endif
            let dupcheck[ft] = 1
            let dict_path = $MYVIMDIR . '/dict/' . ft . '.dict'
            if filereadable(dict_path)
                let dicts += [dict_path]
            endif
        endfor
    endfor

    let &l:dictionary = join(dicts, ',')
endfunction "}}}
function! s:set_compiler() "{{{
    let filetype_vs_compiler = {
    \   'c': 'gcc',
    \   'cpp': 'gcc',
    \   'html': 'tidy',
    \   'java': 'javac',
    \}
    try
        for ft in s:current_filetypes()
            execute 'compiler' get(filetype_vs_compiler, ft, ft)
        endfor
    catch /E666:/    " compiler not supported: ...
    endtry
endfunction "}}}
function! s:load_filetype() "{{{
    if &omnifunc == ""
        setlocal omnifunc=syntaxcomplete#Complete
    endif
    if &formatoptions !~# 'j'
        " 7.3.541 or later
        set formatoptions+=j
    endif

    call s:set_dict()
    call s:set_compiler()
endfunction "}}}

autocmd vimrc FileType * call s:load_filetype()

" }}}

" }}}
" Commands {{{
" :Expand {{{
command!
\   -bar -nargs=?
\   Expand
\   call s:cmd_expand(<q-args>)

function! s:cmd_expand(args) "{{{
    if a:args != ''
        let str = expand(a:args)
    else
        if getbufvar('%', '&buftype') == ''
            let str = expand('%:p')
        else
            let str = expand('%')
        endif
    endif
    if s:is_win
        let str = tr(str, '/', '\')
    endif
    echo str
    let [@", @+, @*] = [str, str, str]
endfunction "}}}

MapAlterCommand ep Expand
" }}}
" :Glob, :GlobPath {{{
command!
\   -bar -nargs=+ -complete=file
\   Glob
\   echo glob(<q-args>, 1)

MapAlterCommand gl[ob] Glob

command!
\   -bar -nargs=+ -complete=file
\   GlobPath
\   echo globpath(&rtp, <q-args>, 1)

MapAlterCommand gp GlobPath
" }}}
" :SynNames {{{
" :help synstack()

command!
\   -bar
\   SynNames
\
\     for s:id in synstack(line("."), col("."))
\   |     echo printf('%s (%s)', synIDattr(s:id, "name"), synIDattr(synIDtrans(s:id), "name"))
\   | endfor
\   | unlet! s:id
" }}}
" :Ctags {{{
MapAlterCommand ctags Ctags

Map [n] <C-]> :<C-u>call <SID>tagjump()<CR>

function! s:tagjump() abort
    try
        execute "normal! \<C-]>"
    catch
        Ctags
        execute "normal! \<C-]>"
    endtry
endfunction

command!
\   -bar -nargs=*
\   Ctags
\   call s:cmd_ctags(<q-args>)

function! s:cmd_ctags(q_args) "{{{
    if !executable('ctags')
        echohl ErrorMsg
        echomsg "Ctags: No 'ctags' command in PATH"
        echohl None
        return
    endif
    execute '!ctags' (filereadable('.ctags') ? '' : '-R') a:q_args
endfunction "}}}
" }}}
" :WatchAutocmd {{{

" Create watch-autocmd augroup.
augroup watch-autocmd
    autocmd!
augroup END

command! -bar -bang -nargs=1 -complete=event WatchAutocmd
\   call s:cmd_{<bang>0 ? "un" : ""}watch_autocmd(<q-args>)


let s:watching_events = {}

function! s:cmd_unwatch_autocmd(event)
    if !exists('#'.a:event)
        echohl ErrorMsg
        echomsg "Invalid event name: ".a:event
        echohl None
        return
    endif
    if !has_key(s:watching_events, a:event)
        echohl ErrorMsg
        echomsg "Not watching ".a:event." event yet..."
        echohl None
        return
    endif

    unlet s:watching_events[a:event]
    echomsg 'Removed watch for '.a:event.' event.'
endfunction
function! s:cmd_watch_autocmd(event)
    if !exists('#'.a:event)
        echohl ErrorMsg
        echomsg "Invalid event name: ".a:event
        echohl None
        return
    endif
    if has_key(s:watching_events, a:event)
        echomsg "Already watching ".a:event." event."
        return
    endif

    execute 'autocmd watch-autocmd' a:event '*'
    \       'echohl MoreMsg |'
    \       'echomsg "Executing '''.a:event.''' event..." |'
    \       'echohl None'
    let s:watching_events[a:event] = 1
    echomsg 'Added watch for' a:event 'event.'
endfunction
" }}}
" :Kwbd {{{
" http://nanasi.jp/articles/vim/kwbd_vim.html
command! -bar Kwbd execute "enew | bw ".bufnr("%")
" }}}
" :ScrollbindEnable, :ScrollbindDisable, :ScrollbindToggle {{{

" Enable/Disable 'scrollbind', 'cursorbind' options.
command! -bar ScrollbindEnable  call s:cmd_scrollbind(1)
command! -bar ScrollbindDisable call s:cmd_scrollbind(0)
command! -bar ScrollbindToggle  call s:cmd_scrollbind_toggle()

function! s:cmd_scrollbind_toggle()
    if get(t:, 'vimrc_scrollbind', 0)
        ScrollbindDisable
    else
        ScrollbindEnable
    endif
endfunction

function! s:cmd_scrollbind(enable)
    let winnr = winnr()
    try
        call s:scrollbind_specific_mappings(a:enable)
        windo let &l:scrollbind = a:enable
        if exists('+cursorbind')
            windo let &l:cursorbind = a:enable
        endif
        let t:vimrc_scrollbind = a:enable
    finally
        execute winnr . 'wincmd w'
    endtry
endfunction

function! s:scrollbind_specific_mappings(enable)
    if a:enable
        " Check either buffer-local those mappings are mapped already or not.
        if get(maparg('<C-e>', 'n', 0, 1), 'buffer', 0)
            Map -buffer [n] <C-e> :<C-u>call <SID>no_scrollbind('<C-e>')<CR>
        endif
        if get(maparg('<C-y>', 'n', 0, 1), 'buffer', 0)
            Map -buffer [n] <C-y> :<C-u>call <SID>no_scrollbind('<C-y>')<CR>
        endif
    else
        " Check either those mappings are above one or not.
        let map = maparg('<C-e>', 'n', 0, 1)
        if get(map, 'buffer', 0)
        \   || get(map, 'rhs', '') =~# 'no_scrollbind('
            nunmap <buffer> <C-e>
        endif
        let map = maparg('<C-y>', 'n', 0, 1)
        if get(map, 'buffer', 0)
        \   || get(map, 'rhs', '') =~# 'no_scrollbind('
            nunmap <buffer> <C-y>
        endif
    endif
endfunction

function! s:no_scrollbind(key)
    let scrollbind = &l:scrollbind
    try
        execute 'normal!' a:key
    finally
        let &l:scrollbind = scrollbind
    endtry
endfunction

" }}}
" :ResetHelpBuffer {{{
command! -bar ResetHelpBuffer
\   setlocal noro modifiable buftype= list noet
" }}}
" }}}
" Quickfix {{{
autocmd vimrc QuickfixCmdPost [l]*
\   execute (!empty(getqflist()) ? 'lopen' : 'lclose')
autocmd vimrc QuickfixCmdPost [^l]*
\   execute (!empty(getqflist()) ? 'copen' : 'cclose')

" Add current line to quickfix. {{{
" quickfix as bookmark list.
command! -bar -range QFAddLine <line1>,<line2>call s:quickfix_add_range()

" ... {{{

function! s:quickfix_add_range() range
    for lnum in range(a:firstline, a:lastline)
        call s:quickfix_add_line(lnum)
    endfor
endfunction

function! s:quickfix_add_line(lnum)
    let lnum = a:lnum =~# '^\d\+$' ? a:lnum : line(a:lnum)
    let qf = {
    \   'bufnr': bufnr('%'),
    \   'lnum': lnum,
    \   'text': getline(lnum),
    \}
    if s:quickfix_supported_quickfix_title()
        " Set 'qf.col' and 'qf.vcol'.
        call s:quickfix_add_line_set_col(lnum, qf)
    endif
    call setqflist([qf], 'a')
endfunction
function! s:quickfix_add_line_set_col(lnum, qf)
    let lnum = a:lnum
    let qf = a:qf

    let search_word = s:quickfix_get_search_word()
    if search_word !=# ''
        let idx = match(getline(lnum), search_word[1:])
        if idx isnot -1
            let qf.col = idx + 1
            let qf.vcol = 0
        endif
    endif
endfunction
" }}}

" Quickfix utility functions {{{
function! s:quickfix_get_winnr()
    " quickfix window is usually at bottom,
    " thus reverse-lookup.
    for winnr in reverse(range(1, winnr('$')))
        if getwinvar(winnr, '&buftype') ==# 'quickfix'
            return winnr
        endif
    endfor
    return 0
endfunction
function! s:quickfix_exists_window()
    return !!s:quickfix_get_winnr()
endfunction
function! s:quickfix_supported_quickfix_title()
    return v:version >=# 703
endfunction
function! s:quickfix_get_search_word()
    " NOTE: This function returns a string starting with "/"
    " if previous search word is found.
    " This function can't use an empty string
    " as a failure return value, because ":vimgrep /" also returns an empty string.

    " w:quickfix_title only works 7.3 or later.
    if !s:quickfix_supported_quickfix_title()
        return ''
    endif

    let qf_winnr = s:quickfix_get_winnr()
    if !qf_winnr
        copen
    endif

    try
        let qf_title = getwinvar(qf_winnr, 'quickfix_title')
        if qf_title ==# ''
            return ''
        endif

        " NOTE: Supported only :vim[grep] command.
        let rx = '^:\s*\<vim\%[grep]\>\s*\(/.*\)'
        let m = matchlist(qf_title, rx)
        if empty(m)
            return ''
        endif

        return m[1]
    finally
        if !qf_winnr
            cclose
        endif
    endtry
endfunction

" }}}

" }}}

" }}}
" Runtime plugin config {{{
" Configuration for plugins in default runtime dir.

" syntax/vim.vim {{{
    " augroup: a
    " function: f
    " lua: l
    " perl: p
    " ruby: r
    " python: P
    " tcl: t
    " mzscheme: m
    let g:vimsyn_folding = 'af'
"}}}
" indent/vim.vim {{{
    let g:vim_indent_cont = 0
" }}}
" syntax/sh.vim {{{
    let g:is_bash = 1
" }}}

" }}}
" Misc. (bundled with kaoriya vim's .vimrc & etc.) {{{

" About japanese input method {{{
if has('multi_byte_ime') || has('xim')
    " Cursor color when IME is on.
    highlight CursorIM guibg=Purple guifg=NONE
    set iminsert=0 imsearch=0
endif
" }}}

" Make <M-Space> same as ordinal applications on MS Windows {{{
if has('gui_running') && s:is_win
    Map [n] <M-Space> :<C-u>simalt ~<CR>
endif
" }}}

" Exit diff mode automatically {{{
" https://hail2u.net/blog/software/vim-turn-off-diff-mode-automatically.html

augroup vimrc-diff-autocommands
  autocmd!

  " Turn off diff mode automatically
  autocmd WinEnter *
  \ if (winnr('$') == 1) &&
  \    (getbufvar(winbufnr(0), '&diff')) == 1 |
  \     diffoff                               |
  \ endif
augroup END
" }}}

" Block cursor in MSYS2 console {{{
if s:is_msys
    let &t_ti.="\e[1 q"
    let &t_SI.="\e[5 q"
    let &t_EI.="\e[1 q"
    let &t_te.="\e[0 q"
endif
" }}}

" }}}
" End. {{{

set secure
" }}}
