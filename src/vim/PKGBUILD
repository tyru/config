#!/bin/bash

name=vim
prefix=$HOME/local/$name
enable_lua=false
#lua_prefix=/usr/local
# Mac (Homebrew)
#lua_prefix=/usr/local/opt/lua
lua_prefix=/usr/local/opt/luajit
repos=$name
# {remote name}!{branch}!{url}
#repos_list=('origin!master!https://github.com/vim/vim' 'rbtnn!clpum_and_tabsidebar!https://github.com/rbtnn/vim')
repos_list=()
#default='tyru!tyru!https://github.com/tyru/vim'
#default='rbtnn!clpum_and_tabsidebar!https://github.com/rbtnn/vim'
default='origin!master!https://github.com/vim/vim'
# https://vim-jp.org/docs/build_linux.html
depends=(git gettext libtinfo-dev libacl1-dev libgpm-dev build-essential)
$enable_lua && depends=("${depends[@]}" lua5.3 liblua5.3-dev luajit libluajit-5.1)
quiet='--quiet'
#quiet=

update() {
  if dirty_worktree $name/.git; then
    echo "fatal: $name: git worktree is dirty. update aborted." >&2
    return 1
  fi
  cd "$name" || return $?

  local name
  local branch
  local patch

  # Add remotes and fetch
  force_add_remote "$default"
  if [ ${#repos_list[@]} -gt 0 ]; then
    for patch in "${repos_list[@]}"; do
      force_add_remote "$patch"
      name=$(get_name "$patch")
      git fetch "$name"
    done
  fi

  # Checkout default branch
  remote=$(get_name "$default")
  branch=$(get_branch "$default")
  if ! exists_branch "$branch"; then
    git checkout -b "$branch" "$remote/$branch"
  fi
  git checkout "$branch"
  git pull "$remote" "$branch"

  # Merge patches to default branch
  if [ ${#repos_list[@]} -gt 0 ]; then
    for patch in "${repos_list[@]}"; do
      name=$(get_name "$patch")
      branch=$(get_branch "$patch")
      git merge --no-ff --no-edit "$name/$branch"
    done
  fi
}

get_name() {
  echo "$1" | cut -d! -f1
}

get_branch() {
  echo "$1" | cut -d! -f2
}

get_url() {
  echo "$1" | cut -d! -f3
}

exists_branch() {
  git branch | sed 's/^..//' | grep -q "^$1$"
}

# Add a remote if it does not exist.
# If it exists, remove and add again.
force_add_remote() {
  local name
  local url
  name=$(get_name "$1")
  url=$(get_url "$1")
  if [ "$(git remote get-url "$name" 2>/dev/null)" != "$url" ]; then
    git remote remove "$name" 2>/dev/null
    git remote add "$name" "$url"
  fi
}

dirty_worktree() {
  [ "$(git --git-dir="$1" status --porcelain)" ]
}

current_branch() {
  git branch | grep -E '^\*' | awk '$0=$2'
}

build() {
  cd "$name" || return $?

  config_opts="--prefix=$prefix"
  config_opts="$config_opts --with-features=huge"
  config_opts="$config_opts --enable-multibyte"
  config_opts="$config_opts --with-compiledby='tyru <tyru.exe@gmail.com>'"
  #config_opts="$config_opts --enable-perlinterp"
  #config_opts="$config_opts --enable-pythoninterp"
  #config_opts="$config_opts --enable-rubyinterp"
  if $enable_lua; then
    config_opts="$config_opts --enable-luainterp"
    config_opts="$config_opts --with-lua-prefix=$lua_prefix"
    config_opts="$config_opts --with-luajit"
  fi
  #config_opts="$config_opts --enable-gui=gtk2"
  config_opts="$config_opts --enable-fontset"
  config_opts="$config_opts --enable-fail-if-missing"
  config_opts="$config_opts --enable-gpm"
  config_opts="$config_opts --enable-xim"
  config_opts="$config_opts --enable-fontset"

  [ -f ./configure ] || make $quiet configure
  sh -c "./configure $quiet $config_opts"
  if [ $? -ne 0 ]; then
    make $quiet distclean
    sh -c "./configure $quiet $config_opts" || return $?
  fi
  make $quiet
}

package() {
  cd "$name" && rm -rf "$prefix" && make --quiet install
}
